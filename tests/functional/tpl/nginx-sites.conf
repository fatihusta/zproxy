server {
	listen 80 default_server;
	listen [::]:80 default_server;

	listen 443 ssl http2;
	listen [::]:443 ssl http2;

	ssl_certificate     #{TEST_TPL}/zencert.pem;
	ssl_certificate_key #{TEST_TPL}/zencert-c.key;

	root #{HTTP_WEBROOT};

	# Add index.php to the list if you are using PHP
	# index index.html index.htm;

	server_name bck-#{BCK_ID};
	add_header Backend $server_name;
	more_clear_headers 'Date:*';
	more_clear_headers 'ETag:*';
	more_clear_headers 'Last-Modified:*';


# GET, POST: /
	location / {
		echo "Default response of the backend #{BCK_ID}";
	}

# GET: /download
	location ~ /download/ {
		try_files $uri $uri/ /index.php$is_args$args;
	}

# GET: /client-ip
	location /client-ip {
		echo $remote_addr;
   }

# GET: /echo
	location /echo {
		echo_read_request_body;
		echo_request_body;
   }

# GET: /headers
	location /headers {
		echo $echo_client_request_headers;
   }

# GET: /resp-headers/location/(https?)/backend
	location ~ /resp-headers/location/(https?)/backend$ {
		add_header Loc-raw $1://$server_addr/;
		add_header Location $1://$server_addr/;
		add_header Content-Location $1://$server_addr/alt;
		echo "Bck: #{BCK_ID}. Added the bakcned in the Location header in the response with $1 protocol";
   }
# GET: /resp-headers/location/(https?)/vip
	location ~ /resp-headers/location/(https?)/vip$ {
		add_header Loc-raw $1://#{PROXY_VIP}/;
		add_header Location $1://#{PROXY_VIP}/;
		add_header Content-Location $1://#{PROXY_VIP}/alt;
		echo "Bck: #{BCK_ID}. Added the VIP in the Location header in the response with $1 protocol";
   }
# GET: /resp-headers/location/(https?)/<value>
	location ~ /resp-headers/location/(https?)/(.*)$ {
		add_header Loc-raw $1://$2/;
		add_header Location $1://$2/;
		add_header Content-Location $1://$2/alt;
		echo "Bck: #{BCK_ID}. Added the Location header in the response";
   }

# GET: /body-size/<size>/chunked
	location ~ /body-size/([0-9]+)/chunked$ {
		#~ more_clear_headers 'Content-Length*';  # echo sends the response chunked
		echo_duplicate $1 '1';
   }

# GET: /sleep-response/<seconds>
	location ~ /sleep-response/([0-9]+)$ {
     echo_sleep   $1;
     echo body;
   }

# GET: /sleep-body/<seconds>
	location ~ /sleep-body/([0-9]+)$ {
     echo body part 1;
     echo_flush;  # ensure the client can see previous output immediately
     echo_sleep   $1;
     echo body part 2;
   }

# GET, POST, PUT, DELETE: /status/<code>
	location /status/200 {
	    echo_status 200;
	    echo "Custom HTTP code";
   }
	location /status/201 {
	    echo_status 201;
	    echo "Custom HTTP code";
   }
	location /status/301 {
	    echo_status 301;
	    echo "Custom HTTP code";
   }
	location /status/302 {
	    echo_status 302;
	    echo "Custom HTTP code";
   }
	location /status/400 {
	    echo_status 400;
	    echo "Custom HTTP code";
   }
	location /status/401 {
	    echo_status 401;
	    echo "Custom HTTP code";
   }
	location /status/403 {
	    echo_status 403;
	    echo "Custom HTTP code";
   }
	location /status/404 {
	    echo_status 404;
	    echo "Custom HTTP code";
   }
	location /status/405 {
	    echo_status 405;
	    echo "Custom HTTP code";
   }
	location /status/500 {
	    echo_status 500;
	    echo "Custom HTTP code";
   }
	location /status/503 {
	    echo_status 503;
	    echo "Custom HTTP code";
   }

}
