#!/bin/bash

TMP_DIR="/tmp/functional-tests"
mkdir -p $TMP_DIR 2>/dev/null

# Value 1: it shows the executed system commands
# Value 2: it shows the output of the system commands
DEBUG=0

# flags
# flag to know if zproxy is running before ending the tests
ZPROXY_KEEP_RUNNING=0
FUNCTIONAL_FLAG=1
BENCHMARK_FLAG=0

# Colors for test output
COLOR_NON="\033[0m"
COLOR_ERR="\033[0;31m"
COLOR_SUC="\033[0;32m"
DIFF_OPT="-u"

# Path of binaries and where deploy tmp files
PROXY_CFG_F="$TMP_DIR/zproxy.cfg"
PROXY_PID_F="$TMP_DIR/env_proxy.pid"
PROXY_BIN="/usr/local/zevenet/app/zproxy/bin/zproxy"
PROXY_CTL_SOCKET="$TMP_DIR/env_proxy.socket"
PROXY_SOCKET_IP="localhost"
PROXYCTL_BIN="/usr/local/zevenet/app/zproxy/bin/zproxyctl"
WRK_BIN="/usr/bin/wrk"
CURL_BIN="/usr/bin/curl"
HTTPD_BIN="/usr/sbin/nginx"
ZPROXY_TPL="tpl/init_zproxy.cfg"
HTTP_TPL="tpl/nginx.conf"
NGINX_MODULE_ECHO="/usr/lib/nginx/modules/ngx_http_echo_module.so"
NGINX_MODULE_HEADER="/usr/lib/nginx/modules/ngx_http_headers_more_filter_module.so"
NGINX_MODULE_ECHO_CONF="/etc/nginx/modules-enabled/50-mod-http-echo.conf"
NGINX_MODULE_HEADER_CONF="/etc/nginx/modules-enabled/50-mod-http-headers-more-filter.conf"

OUTPUT_FILES="cmd.out response_headers.out body.out error.out extended.out benchmark.out"
AVERAGE_FILES_TMP="cmd.out.tmp response_headers.out.tmp body.out.tmp error.out.tmp extended.out.tmp"

# Define the test network
CL_SUBNET="10.1.1"
CL_VIA_SUBNET="10.1.0"
PROXY_BACK_SUB="10.2.0"
BCK_SUBNET="10.2.1"
PROXY_VIP="10.1.2.1"

# Proxy global configuration
PROXY_VPORT="80"
PROXY_IF="VIP"
PROXY_GRACETIME=1
PROXY_NS="proxy-ns"
PROXY_CTL_DUMP_METHOD="GET"
PROXY_CTL_DUMP_URL="/listener/0/services"
PROXY_CTL_RELOAD_URL="/config"
PROXY_CTL_RELOAD_METHOD="PATCH"

# Client cfg
CLIENT_CONN_TIMEOUT=2

# This variables defines the lab nodes size
TESTS_NUM_CL=2
TESTS_NUM_BCK=2

# Benchmark
# This is the best performance between the client and the backend.
BENCH_WITHOUT_PROXY=""
# It is the percentage error accepted respected the saved benchmark value. IE (3%)
BENCH_ERR_ACCEPTED=3
BENCH_CONNS=50
BENCH_DELAY=30
BENCH_CL_THREADS=2


###

# Some functions to create dynamic variables. They depend on the number of clients and bcks nodes
get_cl_ns () {
	local ID="$1"
	if [[ "$ID" == "" ]]; then ID=1; fi
	local NS="cl-ns-$ID"
	echo "$NS"
}

get_cl_if () {
	echo "vcl$1"
}

get_cl_ip () {
	echo "${CL_SUBNET}.$ID"
}

get_cl_gw () {
	echo "${CL_VIA_SUBNET}.$ID"
}

get_bck_ns () {
	local ID="$1"
	if [[ "$ID" == "" ]]; then ID=1; fi
	local NS="bck-ns-${ID}"
	echo "$NS"
}

get_bck_if () {
	echo "vbck${ID}"
}

get_bck_ip () {
	echo "${BCK_SUBNET}.$ID"
}

get_bck_gw () {
	echo "${PROXY_BACK_SUB}.$ID"
}

# it is the maximum number of cl or bck. It is used to create the cl and bck variables
MAX_NODES=2

# They are required for tpl files
create_vars () {

	TMP="$TMP_DIR/envdyn"
	rm $TMP 2>/dev/null

	touch $TMP
	for ID in $(seq 1 $MAX_NODES); do
		VAR=$(get_cl_ns $ID)
		echo "CL_NS_$ID=$VAR" >>$TMP
		VAR=$(get_cl_if $ID)
		echo "CL_IF_$ID=$VAR" >>$TMP
		VAR=$(get_cl_ip $ID)
		echo "CL_IP_$ID=$VAR" >>$TMP
		VAR=$(get_cl_gw $ID)
		echo "CL_GW_$ID=$VAR" >>$TMP

		VAR=$(get_bck_ns $ID)
		echo "BCK_NS_$ID=$VAR" >>$TMP
		VAR=$(get_bck_if $ID)
		echo "BCK_IF_$ID=$VAR" >>$TMP
		VAR=$(get_bck_ip $ID)
		echo "BCK_IP_$ID=$VAR" >>$TMP
		VAR=$(get_bck_gw $ID)
		echo "BCK_GW_$ID=$VAR" >>$TMP
	done

	source $TMP
	#rm $TMP
}
create_vars
